/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Forbidden
import io.swagger.client.model.GetCharactersCharacterIdSearchOk
import io.swagger.client.model.GetSearchOk
import io.swagger.client.model.InternalServerError
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class SearchApi(val defBasePath: String = "https://esi.tech.ccp.is/latest",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Search on a string
   * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/v2/characters/{character_id}/search/&#x60;  --- This route is cached for up to 3600 seconds
   * @param categories Type of entities to search for 
   * @param characterId An EVE character ID 
   * @param search The string to search on 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param language Language to use in the response (optional, default to en-us)
   * @param strict Whether the search should be a strict match (optional, default to false)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return GetCharactersCharacterIdSearchOk
   */
  def getCharactersCharacterIdSearch(categories: List[String], characterId: Int, search: String, datasource: Option[String] /* = tranquility*/, language: Option[String] /* = en-us*/, strict: Option[Boolean] /* = false*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[GetCharactersCharacterIdSearchOk] = {
    // create path and map variables
    val path = "/characters/{character_id}/search/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",apiInvoker.escape(characterId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (categories == null) throw new Exception("Missing required parameter 'categories' when calling SearchApi->getCharactersCharacterIdSearch")

    if (search == null) throw new Exception("Missing required parameter 'search' when calling SearchApi->getCharactersCharacterIdSearch")

    queryParams += "categories" -> categories.toString
    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    language.map(paramVal => queryParams += "language" -> paramVal.toString)
    queryParams += "search" -> search.toString
    strict.map(paramVal => queryParams += "strict" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetCharactersCharacterIdSearchOk]).asInstanceOf[GetCharactersCharacterIdSearchOk])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Search on a string
   * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/v1/search/&#x60;  Alternate route: &#x60;/legacy/search/&#x60;  --- This route is cached for up to 3600 seconds
   * @param categories Type of entities to search for 
   * @param search The string to search on 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param language Language to use in the response (optional, default to en-us)
   * @param strict Whether the search should be a strict match (optional, default to false)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return GetSearchOk
   */
  def getSearch(categories: List[String], search: String, datasource: Option[String] /* = tranquility*/, language: Option[String] /* = en-us*/, strict: Option[Boolean] /* = false*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[GetSearchOk] = {
    // create path and map variables
    val path = "/search/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (categories == null) throw new Exception("Missing required parameter 'categories' when calling SearchApi->getSearch")

    if (search == null) throw new Exception("Missing required parameter 'search' when calling SearchApi->getSearch")

    queryParams += "categories" -> categories.toString
    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    language.map(paramVal => queryParams += "language" -> paramVal.toString)
    queryParams += "search" -> search.toString
    strict.map(paramVal => queryParams += "strict" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetSearchOk]).asInstanceOf[GetSearchOk])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
