/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Forbidden
import io.swagger.client.model.GetCorporationsCorporationIdAlliancehistory200Ok
import io.swagger.client.model.GetCorporationsCorporationIdIconsNotFound
import io.swagger.client.model.GetCorporationsCorporationIdIconsOk
import io.swagger.client.model.GetCorporationsCorporationIdMembers200Ok
import io.swagger.client.model.GetCorporationsCorporationIdMembertracking200Ok
import io.swagger.client.model.GetCorporationsCorporationIdNotFound
import io.swagger.client.model.GetCorporationsCorporationIdOk
import io.swagger.client.model.GetCorporationsCorporationIdRoles200Ok
import io.swagger.client.model.GetCorporationsCorporationIdStructures200Ok
import io.swagger.client.model.GetCorporationsNames200Ok
import io.swagger.client.model.InternalServerError
import io.swagger.client.model.PutCorporationsCorporationIdStructuresStructureIdNewSchedule
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class CorporationApi(val defBasePath: String = "https://esi.tech.ccp.is/latest",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Get corporation information
   * Public information about a corporation  --- Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return GetCorporationsCorporationIdOk
   */
  def getCorporationsCorporationId(corporationId: Int, datasource: Option[String] /* = tranquility*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[GetCorporationsCorporationIdOk] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetCorporationsCorporationIdOk]).asInstanceOf[GetCorporationsCorporationIdOk])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get alliance history
   * Get a list of all the alliances a corporation has been a member of  --- Alternate route: &#x60;/v2/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdAlliancehistory200Ok]
   */
  def getCorporationsCorporationIdAlliancehistory(corporationId: Int, datasource: Option[String] /* = tranquility*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdAlliancehistory200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/alliancehistory/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdAlliancehistory200Ok]).asInstanceOf[List[GetCorporationsCorporationIdAlliancehistory200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation icon
   * Get the icon urls for a corporation  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return GetCorporationsCorporationIdIconsOk
   */
  def getCorporationsCorporationIdIcons(corporationId: Int, datasource: Option[String] /* = tranquility*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[GetCorporationsCorporationIdIconsOk] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/icons/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetCorporationsCorporationIdIconsOk]).asInstanceOf[GetCorporationsCorporationIdIconsOk])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation members
   * Read the current list of members if the calling character is a member.  --- Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdMembers200Ok]
   */
  def getCorporationsCorporationIdMembers(corporationId: Int, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdMembers200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/members/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdMembers200Ok]).asInstanceOf[List[GetCorporationsCorporationIdMembers200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation members
   * Read the current list of members if the calling character is a member.  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/membertracking/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/membertracking/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdMembertracking200Ok]
   */
  def getCorporationsCorporationIdMembertracking(corporationId: Int, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdMembertracking200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/membertracking/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdMembertracking200Ok]).asInstanceOf[List[GetCorporationsCorporationIdMembertracking200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation member roles
   * Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdRoles200Ok]
   */
  def getCorporationsCorporationIdRoles(corporationId: Int, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdRoles200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/roles/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdRoles200Ok]).asInstanceOf[List[GetCorporationsCorporationIdRoles200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation structures
   * Get a list of corporation structures  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param language Language to use in the response (optional, default to en-us)
   * @param page Which page of results to return (optional, default to 1)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdStructures200Ok]
   */
  def getCorporationsCorporationIdStructures(corporationId: Int, datasource: Option[String] /* = tranquility*/, language: Option[String] /* = en-us*/, page: Option[Int] /* = 1*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdStructures200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/structures/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    language.map(paramVal => queryParams += "language" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdStructures200Ok]).asInstanceOf[List[GetCorporationsCorporationIdStructures200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get corporation names
   * Resolve a set of corporation IDs to corporation names  --- Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  --- This route is cached for up to 3600 seconds
   * @param corporationIds A comma separated list of corporation IDs 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsNames200Ok]
   */
  def getCorporationsNames(corporationIds: List[Long], datasource: Option[String] /* = tranquility*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsNames200Ok]] = {
    // create path and map variables
    val path = "/corporations/names/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (corporationIds == null) throw new Exception("Missing required parameter 'corporationIds' when calling CorporationApi->getCorporationsNames")

    queryParams += "corporation_ids" -> corporationIds.toString
    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsNames200Ok]).asInstanceOf[List[GetCorporationsNames200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get npc corporations
   * Get a list of npc corporations  --- Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/dev/corporations/npccorps/&#x60;  --- This route expires daily at 11:05
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[Int]
   */
  def getCorporationsNpccorps(datasource: Option[String] /* = tranquility*/, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[Int]] = {
    // create path and map variables
    val path = "/corporations/npccorps/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[Int]).asInstanceOf[List[Int]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Update structure vulnerability schedule
   * Update the vulnerability window schedule of a corporation structure  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60; 
   * @param corporationId An EVE corporation ID 
   * @param newSchedule New vulnerability window schedule for the structure 
   * @param structureId A structure ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return void
   */
  def putCorporationsCorporationIdStructuresStructureId(corporationId: Int, newSchedule: List[PutCorporationsCorporationIdStructuresStructureIdNewSchedule], structureId: Long, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None) = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/structures/{structure_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId)).replaceAll("\\{" + "structure_id" + "\\}",apiInvoker.escape(structureId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (newSchedule == null) throw new Exception("Missing required parameter 'newSchedule' when calling CorporationApi->putCorporationsCorporationIdStructuresStructureId")

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = newSchedule

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
                  case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
