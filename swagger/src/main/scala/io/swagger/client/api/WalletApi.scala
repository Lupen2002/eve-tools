/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Forbidden
import io.swagger.client.model.GetCharactersCharacterIdWalletJournal200Ok
import io.swagger.client.model.GetCharactersCharacterIdWalletTransactions200Ok
import io.swagger.client.model.GetCorporationsCorporationIdWallets200Ok
import io.swagger.client.model.InternalServerError
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class WalletApi(val defBasePath: String = "https://esi.tech.ccp.is/latest",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Get a character&#39;s wallet balance
   * Returns a character&#39;s wallet balance  --- Alternate route: &#x60;/v1/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/wallet/&#x60;  --- This route is cached for up to 120 seconds
   * @param characterId An EVE character ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return Float
   */
  def getCharactersCharacterIdWallet(characterId: Int, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[Float] = {
    // create path and map variables
    val path = "/characters/{character_id}/wallet/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",apiInvoker.escape(characterId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[Float]).asInstanceOf[Float])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get character wallet journal
   * Retrieve character wallet journal  --- Alternate route: &#x60;/v1/characters/{character_id}/wallet/journal/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/journal/&#x60;  --- This route is cached for up to 3600 seconds
   * @param characterId An EVE character ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param fromId Only show journal entries happened before the transaction referenced by this id (optional)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCharactersCharacterIdWalletJournal200Ok]
   */
  def getCharactersCharacterIdWalletJournal(characterId: Int, datasource: Option[String] /* = tranquility*/, fromId: Option[Long] = None, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCharactersCharacterIdWalletJournal200Ok]] = {
    // create path and map variables
    val path = "/characters/{character_id}/wallet/journal/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",apiInvoker.escape(characterId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    fromId.map(paramVal => queryParams += "from_id" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCharactersCharacterIdWalletJournal200Ok]).asInstanceOf[List[GetCharactersCharacterIdWalletJournal200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get wallet transactions
   * Get wallet transactions of a character  --- Alternate route: &#x60;/v1/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/wallet/transactions/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/wallet/transactions/&#x60;  --- This route is cached for up to 3600 seconds
   * @param characterId An EVE character ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param fromId Only show transactions happened before the one referenced by this id (optional)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCharactersCharacterIdWalletTransactions200Ok]
   */
  def getCharactersCharacterIdWalletTransactions(characterId: Int, datasource: Option[String] /* = tranquility*/, fromId: Option[Long] = None, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCharactersCharacterIdWalletTransactions200Ok]] = {
    // create path and map variables
    val path = "/characters/{character_id}/wallet/transactions/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",apiInvoker.escape(characterId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    fromId.map(paramVal => queryParams += "from_id" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCharactersCharacterIdWalletTransactions200Ok]).asInstanceOf[List[GetCharactersCharacterIdWalletTransactions200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Returns a corporation&#39;s wallet balance
   * Get a corporation&#39;s wallets  --- Alternate route: &#x60;/v1/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/wallets/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/wallets/&#x60;  --- This route is cached for up to 300 seconds
   * @param corporationId An EVE corporation ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCorporationsCorporationIdWallets200Ok]
   */
  def getCorporationsCorporationIdWallets(corporationId: Int, datasource: Option[String] /* = tranquility*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCorporationsCorporationIdWallets200Ok]] = {
    // create path and map variables
    val path = "/corporations/{corporation_id}/wallets/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "corporation_id" + "\\}",apiInvoker.escape(corporationId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCorporationsCorporationIdWallets200Ok]).asInstanceOf[List[GetCorporationsCorporationIdWallets200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
