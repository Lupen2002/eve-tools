/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.Forbidden
import io.swagger.client.model.GetCharactersCharacterIdOrders200Ok
import io.swagger.client.model.GetMarketsGroupsMarketGroupIdNotFound
import io.swagger.client.model.GetMarketsGroupsMarketGroupIdOk
import io.swagger.client.model.GetMarketsPrices200Ok
import io.swagger.client.model.GetMarketsRegionIdHistory200Ok
import io.swagger.client.model.GetMarketsRegionIdHistoryUnprocessableEntity
import io.swagger.client.model.GetMarketsRegionIdOrders200Ok
import io.swagger.client.model.GetMarketsRegionIdOrdersUnprocessableEntity
import io.swagger.client.model.GetMarketsStructuresStructureId200Ok
import io.swagger.client.model.InternalServerError
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class MarketApi(val defBasePath: String = "https://esi.tech.ccp.is/latest",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * List orders from a character
   * List market orders placed by a character  --- Alternate route: &#x60;/v1/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/orders/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/orders/&#x60;  --- This route is cached for up to 3600 seconds
   * @param characterId An EVE character ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetCharactersCharacterIdOrders200Ok]
   */
  def getCharactersCharacterIdOrders(characterId: Int, datasource: Option[String] = Some("tranquility"), token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetCharactersCharacterIdOrders200Ok]] = {
    // create path and map variables
    val path = "/characters/{character_id}/orders/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "character_id" + "\\}",apiInvoker.escape(characterId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetCharactersCharacterIdOrders200Ok]).asInstanceOf[List[GetCharactersCharacterIdOrders200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get item groups
   * Get a list of item groups  --- Alternate route: &#x60;/v1/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/dev/markets/groups/&#x60;  --- This route expires daily at 11:05
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[Int]
   */
  def getMarketsGroups(datasource: Option[String] = Some("tranquility"), userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[Int]] = {
    // create path and map variables
    val path = "/markets/groups/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[Int]).asInstanceOf[List[Int]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * Get item group information
   * Get information on an item group  --- Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;  --- This route expires daily at 11:05
   * @param marketGroupId An Eve item group ID 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param language Language to use in the response (optional, default to en-us)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return GetMarketsGroupsMarketGroupIdOk
   */
  def getMarketsGroupsMarketGroupId(
                                     marketGroupId: Int,
                                     datasource: Option[String] = Some("tranquility"),
                                     language: Option[String] = Some("ru"),
                                     userAgent: Option[String] = None,
                                     xUserAgent: Option[String] = None): Option[GetMarketsGroupsMarketGroupIdOk] = {
    // create path and map variables
    val path = "/markets/groups/{market_group_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "market_group_id" + "\\}",apiInvoker.escape(marketGroupId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    language.map(paramVal => queryParams += "language" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetMarketsGroupsMarketGroupIdOk]).asInstanceOf[GetMarketsGroupsMarketGroupIdOk])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List market prices
   * Return a list of prices  --- Alternate route: &#x60;/v1/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/dev/markets/prices/&#x60;  --- This route is cached for up to 3600 seconds
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetMarketsPrices200Ok]
   */
  def getMarketsPrices(datasource: Option[String] = Some("tranquility"), userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetMarketsPrices200Ok]] = {
    // create path and map variables
    val path = "/markets/prices/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetMarketsPrices200Ok]).asInstanceOf[List[GetMarketsPrices200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List historical market statistics in a region
   * Return a list of historical market statistics for the specified type in a region  --- Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;  --- This route is cached for up to 3600 seconds
   * @param regionId Return statistics in this region 
   * @param typeId Return statistics for this type 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetMarketsRegionIdHistory200Ok]
   */
  def getMarketsRegionIdHistory(regionId: Int, 
                                typeId: Int, 
                                datasource: Option[String] = Some("tranquility"),
                                userAgent: Option[String] = None,
                                xUserAgent: Option[String] = None): Option[List[GetMarketsRegionIdHistory200Ok]] = {
    // create path and map variables
    val path = "/markets/{region_id}/history/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "region_id" + "\\}",apiInvoker.escape(regionId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    queryParams += "type_id" -> typeId.toString
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetMarketsRegionIdHistory200Ok]).asInstanceOf[List[GetMarketsRegionIdHistory200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List orders in a region
   * Return a list of orders in a region  --- Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;  --- This route is cached for up to 300 seconds
   * @param orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. 
   * @param regionId Return orders in this region 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param page Which page of results to return (optional, default to 1)
   * @param typeId Return orders only for this type (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetMarketsRegionIdOrders200Ok]
   */
  def getMarketsRegionIdOrders(orderType: String = "all",
                               regionId: Int,
                               datasource: Option[String] = Some("tranquility"),
                               page: Option[Int] = Some(1),
                               typeId: Option[Int] = None,
                               userAgent: Option[String] = None,
                               xUserAgent: Option[String] = None): Option[List[GetMarketsRegionIdOrders200Ok]] = {
    // create path and map variables
    val path = "/markets/{region_id}/orders/"
      .replaceAll("\\{format\\}", "json")
      .replaceAll("\\{" + "region_id" + "\\}", apiInvoker.escape(regionId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (orderType == null) throw new Exception("Missing required parameter 'orderType' when calling MarketApi->getMarketsRegionIdOrders")

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    queryParams += "order_type" -> orderType.toString
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    typeId.map(paramVal => queryParams += "type_id" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetMarketsRegionIdOrders200Ok]).asInstanceOf[List[GetMarketsRegionIdOrders200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * List orders in a structure
   * Return all orders in a structure  --- Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;  --- This route is cached for up to 300 seconds
   * @param structureId Return orders in this structure 
   * @param datasource The server name you would like data from (optional, default to tranquility)
   * @param page Which page of results to return (optional, default to 1)
   * @param token Access token to use if unable to set a header (optional)
   * @param userAgent Client identifier, takes precedence over headers (optional)
   * @param xUserAgent Client identifier, takes precedence over User-Agent (optional)
   * @return List[GetMarketsStructuresStructureId200Ok]
   */
  def getMarketsStructuresStructureId(structureId: Long, datasource: Option[String] = Some("tranquility"), page: Option[Int] /* = 1*/, token: Option[String] = None, userAgent: Option[String] = None, xUserAgent: Option[String] = None): Option[List[GetMarketsStructuresStructureId200Ok]] = {
    // create path and map variables
    val path = "/markets/structures/{structure_id}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "structure_id" + "\\}",apiInvoker.escape(structureId))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    datasource.map(paramVal => queryParams += "datasource" -> paramVal.toString)
    page.map(paramVal => queryParams += "page" -> paramVal.toString)
    token.map(paramVal => queryParams += "token" -> paramVal.toString)
    userAgent.map(paramVal => queryParams += "user_agent" -> paramVal.toString)
    
    xUserAgent.map(paramVal => headerParams += "X-User-Agent" -> paramVal)

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "array", classOf[GetMarketsStructuresStructureId200Ok]).asInstanceOf[List[GetMarketsStructuresStructureId200Ok]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
